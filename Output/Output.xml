<?xml version="1.0" encoding="utf-8"?>
<robot generated="20250217 15:41:51.358" generator="Rebot 6.0.2 (Python 3.13.1 on win32)" rpa="false" schemaversion="3">
 <suite id="s1" name="Tests" source="D:\Replay\Symphonyreplay\Tests">
  <kw name="Setup highest level suite" type="SETUP">
   <kw library="BuiltIn" name="Set Variable">
    <var>
     ${d.test_server}
    </var>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Returns the given values which can then be assigned to a variables.
    </doc>
    <msg level="INFO" timestamp="20250217 15:40:59.619">
     ${d.test_server} = Dev
    </msg>
    <status endtime="20250217 15:40:59.619" starttime="20250217 15:40:59.618" status="PASS"/>
   </kw>
   <kw library="Support" name="Reset screenshot count variable">
    <kw library="BuiltIn" name="Set Variable">
     <var>
      ${screenshotCount}
     </var>
     <arg>
      ${PABOTQUEUEINDEX}_1
     </arg>
     <doc>
      Returns the given values which can then be assigned to a variables.
     </doc>
     <msg level="INFO" timestamp="20250217 15:40:59.620">
      ${screenshotCount} = 0_1
     </msg>
     <status endtime="20250217 15:40:59.620" starttime="20250217 15:40:59.619" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Set Global Variable">
     <arg>
      ${screenshotCount}
     </arg>
     <doc>
      Makes a variable available globally in all tests and suites.
     </doc>
     <msg level="INFO" timestamp="20250217 15:40:59.620">
      ${screenshotCount} = 0_1
     </msg>
     <status endtime="20250217 15:40:59.620" starttime="20250217 15:40:59.620" status="PASS"/>
    </kw>
    <kw library="Support" name="Set up screenshot directory">
     <kw library="OperatingSystem" name="Create Directory">
      <arg>
       ${OUTPUTDIR}${/}${wvar('screenshot_dir')}
      </arg>
      <doc>
       Creates the specified directory.
      </doc>
      <msg level="INFO" timestamp="20250217 15:40:59.622">
       Web.Dev.screenshot_dir: Screenshot
      </msg>
      <msg html="true" level="INFO" timestamp="20250217 15:40:59.623">
       Created directory '&lt;a href="file://D:\Replay\Symphonyreplay\Output\pabot_results\0\Screenshot"&gt;D:\Replay\Symphonyreplay\Output\pabot_results\0\Screenshot&lt;/a&gt;'.
      </msg>
      <status endtime="20250217 15:40:59.623" starttime="20250217 15:40:59.621" status="PASS"/>
     </kw>
     <status endtime="20250217 15:40:59.623" starttime="20250217 15:40:59.621" status="PASS"/>
    </kw>
    <status endtime="20250217 15:40:59.623" starttime="20250217 15:40:59.619" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Global Variable">
    <arg>
     ${screenshot_taking}
    </arg>
    <arg>
     ${True}
    </arg>
    <doc>
     Makes a variable available globally in all tests and suites.
    </doc>
    <msg level="INFO" timestamp="20250217 15:40:59.624">
     ${screenshot_taking} = True
    </msg>
    <status endtime="20250217 15:40:59.624" starttime="20250217 15:40:59.623" status="PASS"/>
   </kw>
   <kw library="Support" name="Setup linux execution">
    <kw library="BuiltIn" name="Run Keyword And Return Status">
     <var>
      ${web_test_check}
     </var>
     <arg>
      Variable Should Exist
     </arg>
     <arg>
      ${web_test}
     </arg>
     <doc>
      Runs the given keyword with given arguments and returns the status as a Boolean value.
     </doc>
     <kw library="BuiltIn" name="Variable Should Exist">
      <arg>
       ${web_test}
      </arg>
      <doc>
       Fails unless the given variable exists within the current scope.
      </doc>
      <status endtime="20250217 15:40:59.625" starttime="20250217 15:40:59.624" status="PASS"/>
     </kw>
     <msg level="INFO" timestamp="20250217 15:40:59.625">
      ${web_test_check} = True
     </msg>
     <status endtime="20250217 15:40:59.625" starttime="20250217 15:40:59.624" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Run Keyword If">
     <arg>
      ${web_test_check}
     </arg>
     <arg>
      Setup Docker Execution Options
     </arg>
     <doc>
      Runs the given keyword with the given arguments, if ``condition`` is true.
     </doc>
     <kw library="Support_Web" name="Setup Docker Execution Options">
      <kw library="Support_Web" name="Setup Suite Metadata">
       <arg>
        ${browser}
       </arg>
       <kw library="BrowserSupport" name="Get Browser Metadata">
        <var>
         &amp;{browser_information}
        </var>
        <arg>
         browser=${browser}
        </arg>
        <doc>
         Fetches browser metadata information
:param browser: Name of the browser for which information is fetched
:param reload: Re-read the metadata based on the browser
:return: Browser metadata information, dict of format
            {"browser_version": browser version value,
             "driver_version": driver version value}
        </doc>
        <msg level="INFO" timestamp="20250217 15:41:03.038">
         &amp;{browser_information} = { browser_version=132.0.6834.197 | driver_version=132.0.6834.110  }
        </msg>
        <status endtime="20250217 15:41:03.038" starttime="20250217 15:40:59.626" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_name
        </arg>
        <arg>
         ${browser}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20250217 15:41:03.039">
         Set suite metadata 'test_browser_name' to value 'chrome'.
        </msg>
        <status endtime="20250217 15:41:03.039" starttime="20250217 15:41:03.039" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_browser_version
        </arg>
        <arg>
         ${browser_information.browser_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20250217 15:41:03.040">
         Set suite metadata 'test_browser_version' to value '132.0.6834.197'.
        </msg>
        <status endtime="20250217 15:41:03.040" starttime="20250217 15:41:03.039" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Suite Metadata">
        <arg>
         test_driver_version
        </arg>
        <arg>
         ${browser_information.driver_version}
        </arg>
        <doc>
         Sets metadata for the current test suite.
        </doc>
        <msg level="INFO" timestamp="20250217 15:41:03.041">
         Set suite metadata 'test_driver_version' to value '132.0.6834.110 '.
        </msg>
        <status endtime="20250217 15:41:03.041" starttime="20250217 15:41:03.040" status="PASS"/>
       </kw>
       <status endtime="20250217 15:41:03.041" starttime="20250217 15:40:59.626" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Setup Global Docker Execution Options">
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         None
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20250217 15:41:03.043">
         ${global_browser_options} = None
        </msg>
        <status endtime="20250217 15:41:03.043" starttime="20250217 15:41:03.042" status="PASS"/>
       </kw>
       <kw library="OperatingSystem" name="Get Environment Variable">
        <var>
         ${docker_check}
        </var>
        <arg>
         EXECUTION_ENVIRONMENT
        </arg>
        <arg>
         not_found
        </arg>
        <doc>
         Returns the value of an environment variable with the given name.
        </doc>
        <msg level="INFO" timestamp="20250217 15:41:03.043">
         ${docker_check} = not_found
        </msg>
        <status endtime="20250217 15:41:03.043" starttime="20250217 15:41:03.043" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Run Keyword And Return If">
        <arg>
         "${docker_check}"!="docker"
        </arg>
        <arg>
         Log
        </arg>
        <arg>
         Not executing on Docker
        </arg>
        <doc>
         Runs the specified keyword and returns from the enclosing user keyword.
        </doc>
        <kw library="BuiltIn" name="Log">
         <arg>
          Not executing on Docker
         </arg>
         <doc>
          Logs the given message with the given level.
         </doc>
         <msg level="INFO" timestamp="20250217 15:41:03.044">
          Not executing on Docker
         </msg>
         <status endtime="20250217 15:41:03.044" starttime="20250217 15:41:03.044" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20250217 15:41:03.044">
         Returning from the enclosing user keyword.
        </msg>
        <status endtime="20250217 15:41:03.044" starttime="20250217 15:41:03.043" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Create List">
        <var>
         @{options}
        </var>
        <arg>
         --headless
        </arg>
        <arg>
         --no-sandbox
        </arg>
        <arg>
         --disable-dev-shm-usage
        </arg>
        <doc>
         Returns a list containing given items.
        </doc>
        <status endtime="20250217 15:41:03.045" starttime="20250217 15:41:03.045" status="NOT RUN"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         @{docker_options}
        </arg>
        <arg>
         @{options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <status endtime="20250217 15:41:03.045" starttime="20250217 15:41:03.045" status="NOT RUN"/>
       </kw>
       <status endtime="20250217 15:41:03.045" starttime="20250217 15:41:03.041" status="PASS"/>
      </kw>
      <kw library="Support_Web" name="Create Webdriver for chrome preferences">
       <kw library="Support_Web" name="Update Docker Execution Options">
        <var>
         ${list_prefs}
        </var>
        <arg>
         ${list_prefs}
        </arg>
        <kw library="BuiltIn" name="Run Keyword And Return Status">
         <var>
          ${docker_check}
         </var>
         <arg>
          Variable Should Exist
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <doc>
          Runs the given keyword with given arguments and returns the status as a Boolean value.
         </doc>
         <kw library="BuiltIn" name="Variable Should Exist">
          <arg>
           ${docker_options}
          </arg>
          <doc>
           Fails unless the given variable exists within the current scope.
          </doc>
          <msg level="FAIL" timestamp="20250217 15:41:03.048">
           Variable '${docker_options}' does not exist.
          </msg>
          <status endtime="20250217 15:41:03.048" starttime="20250217 15:41:03.046" status="FAIL"/>
         </kw>
         <msg level="INFO" timestamp="20250217 15:41:03.048">
          ${docker_check} = False
         </msg>
         <status endtime="20250217 15:41:03.048" starttime="20250217 15:41:03.046" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Get Length">
         <var>
          ${list_prefs_length}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Returns and logs the length of the given item as an integer.
         </doc>
         <msg level="INFO" timestamp="20250217 15:41:03.049">
          Length is 1
         </msg>
         <msg level="INFO" timestamp="20250217 15:41:03.049">
          ${list_prefs_length} = 1
         </msg>
         <status endtime="20250217 15:41:03.049" starttime="20250217 15:41:03.048" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Run Keyword If">
         <var>
          ${list_prefs}
         </var>
         <arg>
          ${docker_check} and ${list_prefs_length}&gt;0 and ${list_prefs}[0] != []
         </arg>
         <arg>
          Combine Lists
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE IF
         </arg>
         <arg>
          ${docker_check}
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${docker_options}
         </arg>
         <arg>
          ELSE
         </arg>
         <arg>
          Set Variable
         </arg>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Runs the given keyword with the given arguments, if ``condition`` is true.
         </doc>
         <kw library="BuiltIn" name="Set Variable">
          <arg>
           ${list_prefs}
          </arg>
          <doc>
           Returns the given values which can then be assigned to a variables.
          </doc>
          <status endtime="20250217 15:41:03.050" starttime="20250217 15:41:03.049" status="PASS"/>
         </kw>
         <msg level="INFO" timestamp="20250217 15:41:03.050">
          ${list_prefs} = [[]]
         </msg>
         <status endtime="20250217 15:41:03.050" starttime="20250217 15:41:03.049" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20250217 15:41:03.050">
         ${list_prefs} = [[]]
        </msg>
        <status endtime="20250217 15:41:03.050" starttime="20250217 15:41:03.045" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Create Chrome Options for download preferences">
        <var>
         ${chrome_options}
        </var>
        <kw library="BuiltIn" name="Evaluate">
         <var>
          ${chrome_options}
         </var>
         <arg>
          sys.modules['selenium.webdriver'].ChromeOptions()
         </arg>
         <arg>
          sys
         </arg>
         <doc>
          Evaluates the given expression in Python and returns the result.
         </doc>
         <msg level="INFO" timestamp="20250217 15:41:03.051">
          ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x00000172F0D0CB90&gt;
         </msg>
         <status endtime="20250217 15:41:03.051" starttime="20250217 15:41:03.051" status="PASS"/>
        </kw>
        <msg level="INFO" timestamp="20250217 15:41:03.051">
         ${chrome_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x00000172F0D0CB90&gt;
        </msg>
        <status endtime="20250217 15:41:03.051" starttime="20250217 15:41:03.050" status="PASS"/>
       </kw>
       <kw library="Support_Web" name="Update Preferences List">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         @{list_prefs}
        </arg>
        <kw library="BuiltIn" name="Convert To String">
         <var>
          ${string_prefs}
         </var>
         <arg>
          ${list_prefs}
         </arg>
         <doc>
          Converts the given item to a Unicode string.
         </doc>
         <msg level="INFO" timestamp="20250217 15:41:03.052">
          ${string_prefs} = [[]]
         </msg>
         <status endtime="20250217 15:41:03.052" starttime="20250217 15:41:03.052" status="PASS"/>
        </kw>
        <kw library="BuiltIn" name="Return From Keyword If">
         <arg>
          ${string_prefs} == [[]]
         </arg>
         <doc>
          Returns from the enclosing user keyword if ``condition`` is true.
         </doc>
         <msg level="INFO" timestamp="20250217 15:41:03.053">
          Returning from the enclosing user keyword.
         </msg>
         <status endtime="20250217 15:41:03.053" starttime="20250217 15:41:03.052" status="PASS"/>
        </kw>
        <for flavor="IN">
         <var>
          ${preference}
         </var>
         <value>
          @{list_prefs}
         </value>
         <iter>
          <var name="${preference}"/>
          <kw library="BuiltIn" name="Call Method">
           <arg>
            ${chrome_options}
           </arg>
           <arg>
            add_argument
           </arg>
           <arg>
            ${preference}
           </arg>
           <doc>
            Calls the named method of the given object with the provided arguments.
           </doc>
           <status endtime="20250217 15:41:03.053" starttime="20250217 15:41:03.053" status="NOT RUN"/>
          </kw>
          <status endtime="20250217 15:41:03.054" starttime="20250217 15:41:03.053" status="NOT RUN"/>
         </iter>
         <status endtime="20250217 15:41:03.054" starttime="20250217 15:41:03.053" status="NOT RUN"/>
        </for>
        <status endtime="20250217 15:41:03.054" starttime="20250217 15:41:03.051" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Call Method">
        <arg>
         ${chrome_options}
        </arg>
        <arg>
         add_experimental_option
        </arg>
        <arg>
         prefs
        </arg>
        <arg>
         ${kw_prefs}
        </arg>
        <doc>
         Calls the named method of the given object with the provided arguments.
        </doc>
        <status endtime="20250217 15:41:03.054" starttime="20250217 15:41:03.054" status="PASS"/>
       </kw>
       <kw library="BuiltIn" name="Set Global Variable">
        <arg>
         ${global_browser_options}
        </arg>
        <arg>
         ${chrome options}
        </arg>
        <doc>
         Makes a variable available globally in all tests and suites.
        </doc>
        <msg level="INFO" timestamp="20250217 15:41:03.055">
         ${global_browser_options} = &lt;selenium.webdriver.chrome.options.Options object at 0x00000172F0D0CB90&gt;
        </msg>
        <status endtime="20250217 15:41:03.055" starttime="20250217 15:41:03.054" status="PASS"/>
       </kw>
       <status endtime="20250217 15:41:03.055" starttime="20250217 15:41:03.045" status="PASS"/>
      </kw>
      <status endtime="20250217 15:41:03.055" starttime="20250217 15:40:59.625" status="PASS"/>
     </kw>
     <status endtime="20250217 15:41:03.055" starttime="20250217 15:40:59.625" status="PASS"/>
    </kw>
    <status endtime="20250217 15:41:03.055" starttime="20250217 15:40:59.624" status="PASS"/>
   </kw>
   <kw library="BuiltIn" name="Set Suite Metadata">
    <arg>
     environment
    </arg>
    <arg>
     ${test_server}
    </arg>
    <doc>
     Sets metadata for the current test suite.
    </doc>
    <msg level="INFO" timestamp="20250217 15:41:03.056">
     Set suite metadata 'environment' to value 'Dev'.
    </msg>
    <status endtime="20250217 15:41:03.056" starttime="20250217 15:41:03.055" status="PASS"/>
   </kw>
   <status endtime="20250217 15:41:03.056" starttime="20250217 15:40:59.617" status="PASS"/>
  </kw>
  <suite id="s1-s1" name="Test spam patch enhance" source="D:\Replay\Symphonyreplay\Tests\Test_spam_patch_enhance.robot">
   <kw library="Spam_Patch_enhance" name="System Logon" type="SETUP">
    <kw library="Process" name="Start Process">
     <arg>
      ${symvar('EXE_PAD')}
     </arg>
     <doc>
      Starts a new process on background.
     </doc>
     <msg level="INFO" timestamp="20250217 15:41:03.074">
      Sym.Dev.EXE_PAD: C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe
     </msg>
     <msg level="INFO" timestamp="20250217 15:41:03.074">
      Starting process:
"C:\Program Files\SAP\FrontEnd\SAPGUI\saplogon.exe"
     </msg>
     <status endtime="20250217 15:41:03.078" starttime="20250217 15:41:03.073" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5s
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20250217 15:41:08.078">
      Slept 5 seconds
     </msg>
     <status endtime="20250217 15:41:08.078" starttime="20250217 15:41:03.078" status="PASS"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Connect To Session">
     <doc>
      Connects to an open session SAP.
     </doc>
     <status endtime="20250217 15:41:08.088" starttime="20250217 15:41:08.079" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20250217 15:41:13.090">
      Slept 5 seconds
     </msg>
     <status endtime="20250217 15:41:13.090" starttime="20250217 15:41:08.089" status="PASS"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Open Connection">
     <arg>
      ${symvar('Connection_Name')}
     </arg>
     <doc>
      Opens a connection to the given connection name. Be sure to provide the full connection name, including the bracket part.
     </doc>
     <msg level="INFO" timestamp="20250217 15:41:13.091">
      Sym.Dev.Connection_Name: M4D
     </msg>
     <status endtime="20250217 15:41:13.625" starttime="20250217 15:41:13.090" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20250217 15:41:18.626">
      Slept 5 seconds
     </msg>
     <status endtime="20250217 15:41:18.626" starttime="20250217 15:41:13.625" status="PASS"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Input Text">
     <arg>
      wnd[0]/usr/txtRSYST-MANDT
     </arg>
     <arg>
      ${symvar('SAP_CLIENT')}
     </arg>
     <doc>
      Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.
     </doc>
     <msg level="INFO" timestamp="20250217 15:41:18.627">
      Sym.Dev.SAP_CLIENT: 000
     </msg>
     <msg level="INFO" timestamp="20250217 15:41:18.636">
      Typing text '000' into text field 'wnd[0]/usr/txtRSYST-MANDT'.
     </msg>
     <status endtime="20250217 15:41:18.636" starttime="20250217 15:41:18.627" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      1
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20250217 15:41:19.638">
      Slept 1 second
     </msg>
     <status endtime="20250217 15:41:19.638" starttime="20250217 15:41:18.637" status="PASS"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Input Text">
     <arg>
      wnd[0]/usr/txtRSYST-BNAME
     </arg>
     <arg>
      ${symvar('SAP_USER')}
     </arg>
     <doc>
      Inserts the given text into the text field identified by locator.
Use keyword `input password` to insert a password in a text field.
     </doc>
     <msg level="INFO" timestamp="20250217 15:41:19.639">
      Sym.Dev.SAP_USER: Xperi-tech
     </msg>
     <msg level="INFO" timestamp="20250217 15:41:19.648">
      Typing text 'Xperi-tech' into text field 'wnd[0]/usr/txtRSYST-BNAME'.
     </msg>
     <status endtime="20250217 15:41:19.648" starttime="20250217 15:41:19.638" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      1
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20250217 15:41:20.649">
      Slept 1 second
     </msg>
     <status endtime="20250217 15:41:20.650" starttime="20250217 15:41:19.649" status="PASS"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Input Password">
     <arg>
      wnd[0]/usr/pwdRSYST-BCODE
     </arg>
     <arg>
      ${symvar('SAP_PASSWORD')}
     </arg>
     <doc>
      Inserts the given password into the text field identified by locator.
The password is not recorded in the log.
     </doc>
     <msg level="INFO" timestamp="20250217 15:41:20.651">
      Sym.Dev.SAP_PASSWORD: Xperi000!2
     </msg>
     <msg level="INFO" timestamp="20250217 15:41:20.658">
      Typing password into text field 'wnd[0]/usr/pwdRSYST-BCODE'.
     </msg>
     <status endtime="20250217 15:41:20.658" starttime="20250217 15:41:20.650" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      2
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20250217 15:41:22.659">
      Slept 2 seconds
     </msg>
     <status endtime="20250217 15:41:22.659" starttime="20250217 15:41:20.658" status="PASS"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Send Vkey">
     <arg>
      0
     </arg>
     <doc>
      Sends a SAP virtual key combination to the window, not into an element.
If you want to send a value to a text field, use `input text` instead.
     </doc>
     <status endtime="20250217 15:41:22.993" starttime="20250217 15:41:22.659" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      5
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20250217 15:41:27.994">
      Slept 5 seconds
     </msg>
     <status endtime="20250217 15:41:27.995" starttime="20250217 15:41:22.994" status="PASS"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Take Screenshot">
     <arg>
      01_loginpage.jpg
     </arg>
     <doc>
      Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
     </doc>
     <msg html="true" level="INFO" timestamp="20250217 15:41:28.095">
      &lt;a href="pabot_results%5C0%5C01_loginpage.jpg"&gt;&lt;img src="pabot_results%5C0%5C01_loginpage.jpg" width="800px"&gt;&lt;/a&gt;
     </msg>
     <status endtime="20250217 15:41:28.095" starttime="20250217 15:41:27.995" status="PASS"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Multiple Logon Handling">
     <arg>
      wnd[1]
     </arg>
     <arg>
      wnd[1]/usr/radMULTI_LOGON_OPT2
     </arg>
     <arg>
      wnd[1]/tbar[0]/btn[0]
     </arg>
     <status endtime="20250217 15:41:28.097" starttime="20250217 15:41:28.096" status="PASS"/>
    </kw>
    <kw library="BuiltIn" name="Sleep">
     <arg>
      1
     </arg>
     <doc>
      Pauses the test executed for the given time.
     </doc>
     <msg level="INFO" timestamp="20250217 15:41:29.098">
      Slept 1 second
     </msg>
     <status endtime="20250217 15:41:29.098" starttime="20250217 15:41:28.097" status="PASS"/>
    </kw>
    <kw library="CustomSapGuiLibrary" name="Take Screenshot">
     <arg>
      00_multi_logon_handling.jpg
     </arg>
     <doc>
      Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
     </doc>
     <msg html="true" level="INFO" timestamp="20250217 15:41:29.156">
      &lt;a href="pabot_results%5C0%5C00_multi_logon_handling.jpg"&gt;&lt;img src="pabot_results%5C0%5C00_multi_logon_handling.jpg" width="800px"&gt;&lt;/a&gt;
     </msg>
     <status endtime="20250217 15:41:29.156" starttime="20250217 15:41:29.098" status="PASS"/>
    </kw>
    <status endtime="20250217 15:41:29.156" starttime="20250217 15:41:03.073" status="PASS"/>
   </kw>
   <test id="s1-s1-t1" line="9" name="Check_Spam_update">
    <kw library="Spam_Patch_enhance" name="Spam Transaction">
     <kw library="CustomSapGuiLibrary" name="Run Transaction">
      <arg>
       spam
      </arg>
      <doc>
       Runs a Sap transaction. An error is given when an unknown transaction is specified.
      </doc>
      <status endtime="20250217 15:41:29.560" starttime="20250217 15:41:29.157" status="PASS"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       5
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <msg level="INFO" timestamp="20250217 15:41:34.561">
       Slept 5 seconds
      </msg>
      <status endtime="20250217 15:41:34.561" starttime="20250217 15:41:29.560" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Take Screenshot">
      <arg>
       B01_spam.jpg
      </arg>
      <doc>
       Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
      </doc>
      <msg html="true" level="INFO" timestamp="20250217 15:41:34.626">
       &lt;a href="pabot_results%5C0%5CB01_spam.jpg"&gt;&lt;img src="pabot_results%5C0%5CB01_spam.jpg" width="800px"&gt;&lt;/a&gt;
      </msg>
      <status endtime="20250217 15:41:34.627" starttime="20250217 15:41:34.562" status="PASS"/>
     </kw>
     <status endtime="20250217 15:41:34.627" starttime="20250217 15:41:29.157" status="PASS"/>
    </kw>
    <kw library="Spam_Patch_enhance" name="Certificate Verification">
     <kw library="CustomSapGuiLibrary" name="Get Maintenance Certificate Text">
      <arg>
       wnd[0]/sbar/pane[0]
      </arg>
      <msg level="INFO" timestamp="20250217 15:41:34.630">
       License available to proceed further
      </msg>
      <status endtime="20250217 15:41:34.630" starttime="20250217 15:41:34.627" status="PASS"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       2
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <msg level="INFO" timestamp="20250217 15:41:36.631">
       Slept 2 seconds
      </msg>
      <status endtime="20250217 15:41:36.632" starttime="20250217 15:41:34.631" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Take Screenshot">
      <arg>
       C01_Certificate.jpg
      </arg>
      <doc>
       Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
      </doc>
      <msg html="true" level="INFO" timestamp="20250217 15:41:36.685">
       &lt;a href="pabot_results%5C0%5CC01_Certificate.jpg"&gt;&lt;img src="pabot_results%5C0%5CC01_Certificate.jpg" width="800px"&gt;&lt;/a&gt;
      </msg>
      <status endtime="20250217 15:41:36.685" starttime="20250217 15:41:36.632" status="PASS"/>
     </kw>
     <status endtime="20250217 15:41:36.686" starttime="20250217 15:41:34.627" status="PASS"/>
    </kw>
    <kw library="Spam_Patch_enhance" name="Loading package">
     <kw library="CustomSapGuiLibrary" name="Click Element">
      <arg>
       wnd[0]/mbar/menu[0]/menu[0]/menu[1]
      </arg>
      <doc>
       Performs a single click on a given element. Used only for buttons, tabs and menu items.
      </doc>
      <status endtime="20250217 15:41:36.817" starttime="20250217 15:41:36.686" status="PASS"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       2
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <msg level="INFO" timestamp="20250217 15:41:38.818">
       Slept 2 seconds
      </msg>
      <status endtime="20250217 15:41:38.819" starttime="20250217 15:41:36.818" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Take Screenshot">
      <arg>
       D01_Load_1.jpg
      </arg>
      <doc>
       Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
      </doc>
      <msg html="true" level="INFO" timestamp="20250217 15:41:38.875">
       &lt;a href="pabot_results%5C0%5CD01_Load_1.jpg"&gt;&lt;img src="pabot_results%5C0%5CD01_Load_1.jpg" width="800px"&gt;&lt;/a&gt;
      </msg>
      <status endtime="20250217 15:41:38.876" starttime="20250217 15:41:38.819" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Click Element">
      <arg>
       wnd[1]/usr/btnSPOP-OPTION1
      </arg>
      <doc>
       Performs a single click on a given element. Used only for buttons, tabs and menu items.
      </doc>
      <status endtime="20250217 15:41:40.990" starttime="20250217 15:41:38.876" status="PASS"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       2
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <msg level="INFO" timestamp="20250217 15:41:42.993">
       Slept 2 seconds
      </msg>
      <status endtime="20250217 15:41:42.993" starttime="20250217 15:41:40.990" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Take Screenshot">
      <arg>
       D02_Load_2.jpg
      </arg>
      <doc>
       Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
      </doc>
      <msg html="true" level="INFO" timestamp="20250217 15:41:43.063">
       &lt;a href="pabot_results%5C0%5CD02_Load_2.jpg"&gt;&lt;img src="pabot_results%5C0%5CD02_Load_2.jpg" width="800px"&gt;&lt;/a&gt;
      </msg>
      <status endtime="20250217 15:41:43.064" starttime="20250217 15:41:42.993" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Click Element">
      <arg>
       wnd[0]/tbar[0]/btn[3]
      </arg>
      <doc>
       Performs a single click on a given element. Used only for buttons, tabs and menu items.
      </doc>
      <status endtime="20250217 15:41:43.242" starttime="20250217 15:41:43.064" status="PASS"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       2
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <msg level="INFO" timestamp="20250217 15:41:45.243">
       Slept 2 seconds
      </msg>
      <status endtime="20250217 15:41:45.244" starttime="20250217 15:41:43.242" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Take Screenshot">
      <arg>
       D03_Load_3.jpg
      </arg>
      <doc>
       Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
      </doc>
      <msg html="true" level="INFO" timestamp="20250217 15:41:45.311">
       &lt;a href="pabot_results%5C0%5CD03_Load_3.jpg"&gt;&lt;img src="pabot_results%5C0%5CD03_Load_3.jpg" width="800px"&gt;&lt;/a&gt;
      </msg>
      <status endtime="20250217 15:41:45.311" starttime="20250217 15:41:45.244" status="PASS"/>
     </kw>
     <status endtime="20250217 15:41:45.311" starttime="20250217 15:41:36.686" status="PASS"/>
    </kw>
    <kw library="Spam_Patch_enhance" name="Display/Define">
     <kw library="CustomSapGuiLibrary" name="Click Element">
      <arg>
       wnd[0]/usr/btnPAT100-QUEUE
      </arg>
      <doc>
       Performs a single click on a given element. Used only for buttons, tabs and menu items.
      </doc>
      <status endtime="20250217 15:41:45.830" starttime="20250217 15:41:45.312" status="PASS"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       2
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <msg level="INFO" timestamp="20250217 15:41:47.831">
       Slept 2 seconds
      </msg>
      <status endtime="20250217 15:41:47.832" starttime="20250217 15:41:45.831" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Take Screenshot">
      <arg>
       E01_Display.jpg
      </arg>
      <doc>
       Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
      </doc>
      <msg html="true" level="INFO" timestamp="20250217 15:41:47.874">
       &lt;a href="pabot_results%5C0%5CE01_Display.jpg"&gt;&lt;img src="pabot_results%5C0%5CE01_Display.jpg" width="800px"&gt;&lt;/a&gt;
      </msg>
      <status endtime="20250217 15:41:47.874" starttime="20250217 15:41:47.832" status="PASS"/>
     </kw>
     <status endtime="20250217 15:41:47.874" starttime="20250217 15:41:45.311" status="PASS"/>
    </kw>
    <kw library="Spam_Patch_enhance" name="Spam software selection">
     <kw library="CustomSapGuiLibrary" name="Click Element">
      <arg>
       wnd[1]/tbar[0]/btn[7]
      </arg>
      <doc>
       Performs a single click on a given element. Used only for buttons, tabs and menu items.
      </doc>
      <status endtime="20250217 15:41:48.480" starttime="20250217 15:41:47.875" status="PASS"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       2
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <msg level="INFO" timestamp="20250217 15:41:50.481">
       Slept 2 seconds
      </msg>
      <status endtime="20250217 15:41:50.482" starttime="20250217 15:41:48.480" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Take Screenshot">
      <arg>
       F01_patch_1.jpg
      </arg>
      <doc>
       Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
      </doc>
      <msg html="true" level="INFO" timestamp="20250217 15:41:50.540">
       &lt;a href="pabot_results%5C0%5CF01_patch_1.jpg"&gt;&lt;img src="pabot_results%5C0%5CF01_patch_1.jpg" width="800px"&gt;&lt;/a&gt;
      </msg>
      <status endtime="20250217 15:41:50.541" starttime="20250217 15:41:50.482" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Spam Multiple Patch Version Select">
      <arg>
       ${comp_id}
      </arg>
      <arg>
       ${search_comp}
      </arg>
      <arg>
       ${search_patch}
      </arg>
      <msg level="FAIL" timestamp="20250217 15:41:50.542">
       ValueError: malformed node or string on line 1: &lt;ast.Name object at 0x00000172F1955210&gt;
      </msg>
      <status endtime="20250217 15:41:50.545" starttime="20250217 15:41:50.541" status="FAIL"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       4
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <status endtime="20250217 15:41:50.546" starttime="20250217 15:41:50.545" status="NOT RUN"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Take Screenshot">
      <arg>
       F02_patch_2.jpg
      </arg>
      <doc>
       Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
      </doc>
      <status endtime="20250217 15:41:50.546" starttime="20250217 15:41:50.546" status="NOT RUN"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Click Element">
      <arg>
       wnd[1]/tbar[0]/btn[0]
      </arg>
      <doc>
       Performs a single click on a given element. Used only for buttons, tabs and menu items.
      </doc>
      <status endtime="20250217 15:41:50.546" starttime="20250217 15:41:50.546" status="NOT RUN"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       2
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <status endtime="20250217 15:41:50.547" starttime="20250217 15:41:50.547" status="NOT RUN"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Take Screenshot">
      <arg>
       F03_patch_3.jpg
      </arg>
      <doc>
       Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
      </doc>
      <status endtime="20250217 15:41:50.547" starttime="20250217 15:41:50.547" status="NOT RUN"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Click Element">
      <arg>
       wnd[1]/tbar[0]/btn[0]
      </arg>
      <doc>
       Performs a single click on a given element. Used only for buttons, tabs and menu items.
      </doc>
      <status endtime="20250217 15:41:50.548" starttime="20250217 15:41:50.548" status="NOT RUN"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       2
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <status endtime="20250217 15:41:50.548" starttime="20250217 15:41:50.548" status="NOT RUN"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Take Screenshot">
      <arg>
       F04_patch_4.jpg
      </arg>
      <doc>
       Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
      </doc>
      <status endtime="20250217 15:41:50.548" starttime="20250217 15:41:50.548" status="NOT RUN"/>
     </kw>
     <status endtime="20250217 15:41:50.549" starttime="20250217 15:41:47.874" status="FAIL"/>
    </kw>
    <kw library="Spam_Patch_enhance" name="Important SAP note handling">
     <status endtime="20250217 15:41:50.549" starttime="20250217 15:41:50.549" status="NOT RUN"/>
    </kw>
    <tag>
     Regression
    </tag>
    <tag>
     spampatchenhance
    </tag>
    <status endtime="20250217 15:41:50.549" starttime="20250217 15:41:29.156" status="FAIL">
     ValueError: malformed node or string on line 1: &lt;ast.Name object at 0x00000172F1955210&gt;
    </status>
   </test>
   <test id="s1-s1-t2" line="17" name="Import Queue">
    <kw library="Spam_Patch_enhance" name="Importing queue from support package">
     <kw library="CustomSapGuiLibrary" name="Click Element">
      <arg>
       wnd[0]/mbar/menu[0]/menu[3]
      </arg>
      <doc>
       Performs a single click on a given element. Used only for buttons, tabs and menu items.
      </doc>
      <status endtime="20250217 15:41:50.628" starttime="20250217 15:41:50.551" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Click Element">
      <arg>
       wnd[1]/tbar[0]/btn[0]
      </arg>
      <doc>
       Performs a single click on a given element. Used only for buttons, tabs and menu items.
      </doc>
      <status endtime="20250217 15:41:50.756" starttime="20250217 15:41:50.628" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Take Screenshot">
      <arg>
       H01_Imp_que_1.jpg
      </arg>
      <doc>
       Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
      </doc>
      <msg html="true" level="INFO" timestamp="20250217 15:41:50.818">
       &lt;a href="pabot_results%5C0%5CH01_Imp_que_1.jpg"&gt;&lt;img src="pabot_results%5C0%5CH01_Imp_que_1.jpg" width="800px"&gt;&lt;/a&gt;
      </msg>
      <status endtime="20250217 15:41:50.818" starttime="20250217 15:41:50.756" status="PASS"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Click Element">
      <arg>
       wnd[1]/tbar[0]/btn[27]
      </arg>
      <doc>
       Performs a single click on a given element. Used only for buttons, tabs and menu items.
      </doc>
      <msg html="true" level="INFO" timestamp="20250217 15:41:50.873">
       &lt;a href="pabot_results%5C0%5Csap-screenshot_1.jpg"&gt;&lt;img src="pabot_results%5C0%5Csap-screenshot_1.jpg" width="800px"&gt;&lt;/a&gt;
      </msg>
      <msg level="FAIL" timestamp="20250217 15:41:50.873">
       ValueError: Cannot find element with id 'wnd[1]/tbar[0]/btn[27]'
      </msg>
      <status endtime="20250217 15:41:50.874" starttime="20250217 15:41:50.818" status="FAIL"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Take Screenshot">
      <arg>
       H02_Start_options.jpg
      </arg>
      <doc>
       Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
      </doc>
      <status endtime="20250217 15:41:50.874" starttime="20250217 15:41:50.874" status="NOT RUN"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       1
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <status endtime="20250217 15:41:50.874" starttime="20250217 15:41:50.874" status="NOT RUN"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Select Radio Button">
      <arg>
       wnd[1]/usr/tabsSTART_OPTIONS/tabpSTART_FC1/ssubSTART_OPTIONS_SCA:SAPLOCS_UI:0701/radLAY0700-RB1_BTCHIM
      </arg>
      <doc>
       Sets radio button to the specified value.
      </doc>
      <status endtime="20250217 15:41:50.875" starttime="20250217 15:41:50.875" status="NOT RUN"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       1
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <status endtime="20250217 15:41:50.875" starttime="20250217 15:41:50.875" status="NOT RUN"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Take Screenshot">
      <arg>
       H03_Start_bkgd.jpg
      </arg>
      <doc>
       Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
      </doc>
      <status endtime="20250217 15:41:50.875" starttime="20250217 15:41:50.875" status="NOT RUN"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Click Element">
      <arg>
       wnd[1]/tbar[0]/btn[0]
      </arg>
      <doc>
       Performs a single click on a given element. Used only for buttons, tabs and menu items.
      </doc>
      <status endtime="20250217 15:41:50.875" starttime="20250217 15:41:50.875" status="NOT RUN"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       1
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <status endtime="20250217 15:41:50.875" starttime="20250217 15:41:50.875" status="NOT RUN"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Take Screenshot">
      <arg>
       H04_Start_bkgd_2.jpg
      </arg>
      <doc>
       Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
      </doc>
      <status endtime="20250217 15:41:50.875" starttime="20250217 15:41:50.875" status="NOT RUN"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Click Element">
      <arg>
       wnd[1]/tbar[0]/btn[25]
      </arg>
      <doc>
       Performs a single click on a given element. Used only for buttons, tabs and menu items.
      </doc>
      <status endtime="20250217 15:41:50.876" starttime="20250217 15:41:50.876" status="NOT RUN"/>
     </kw>
     <kw library="CustomSapGuiLibrary" name="Take Screenshot">
      <arg>
       H05_Start_bkgd_3.jpg
      </arg>
      <doc>
       Takes a screenshot, only if 'screenshots on error' has been enabled,
either at import of with keyword `enable screenshots on error`.
      </doc>
      <status endtime="20250217 15:41:50.876" starttime="20250217 15:41:50.876" status="NOT RUN"/>
     </kw>
     <kw library="BuiltIn" name="Sleep">
      <arg>
       1
      </arg>
      <doc>
       Pauses the test executed for the given time.
      </doc>
      <status endtime="20250217 15:41:50.876" starttime="20250217 15:41:50.876" status="NOT RUN"/>
     </kw>
     <status endtime="20250217 15:41:50.876" starttime="20250217 15:41:50.551" status="FAIL"/>
    </kw>
    <kw library="Spam_Patch_enhance" name="Confirm Queue">
     <status endtime="20250217 15:41:50.876" starttime="20250217 15:41:50.876" status="NOT RUN"/>
    </kw>
    <tag>
     Regression
    </tag>
    <tag>
     spampatchenhance
    </tag>
    <status endtime="20250217 15:41:50.877" starttime="20250217 15:41:50.551" status="FAIL">
     ValueError: Cannot find element with id 'wnd[1]/tbar[0]/btn[27]'
    </status>
   </test>
   <status endtime="20250217 15:41:50.877" starttime="20250217 15:41:03.056" status="FAIL"/>
  </suite>
  <doc>
   Testing functionality through Robot Framework
  </doc>
  <meta name="environment">
   Dev
  </meta>
  <meta name="test_browser_name">
   chrome
  </meta>
  <meta name="test_browser_version">
   132.0.6834.197
  </meta>
  <meta name="test_driver_version">
   132.0.6834.110
  </meta>
  <meta name="test_environment">
   Dev
  </meta>
  <meta name="test_freeze_dependencies">
   astroid==3.3.8,attrs==25.1.0,beautifulsoup4==4.13.0,bs4==0.0.2,certifi==2025.1.31,cffi==1.17.1,chardet==5.2.0,charset-normalizer==3.4.1,click==8.1.8,colorama==0.4.6,cryptography==44.0.0,defusedxml==0.7.1,dill==0.3.9,docutils==0.21.2,et_xmlfile==2.0.0,exceptiongroup==1.2.2,gitdb==4.0.12,GitPython==3.1.44,h11==0.14.0,idna==3.10,isort==6.0.0,Jinja2==3.1.5,jira==3.8.0,jsonpath-ng==1.7.0,jsonschema==4.23.0,jsonschema-specifications==2024.10.1,lazy-object-proxy==1.10.0,lxml==5.3.0,markdown-it-py==3.0.0,MarkupSafe==3.0.2,mccabe==0.7.0,mdurl==0.1.2,natsort==8.4.0,oauthlib==3.2.2,openpyxl==3.1.5,outcome==1.3.0.post0,packaging==24.2,pathspec==0.11.2,pillow==11.1.0,pip==25.0,platformdirs==4.3.6,ply==3.11,pycparser==2.22,Pygments==2.19.1,pylint==3.3.4,PyPDF2==3.0.1,PySocks==1.7.1,pywin32==308,PyYAML==6.0.2,referencing==0.36.2,reportlab==4.3.0,requests==2.32.3,requests-oauthlib==2.0.0,requests-toolbelt==1.0.0,rich==13.9.4,rich-click==1.6.1,robotframework==6.0.2,robotframework-datadriver==1.9.0,robotframework-excellib==2.0.1,robotframework-jsonlibrary==0.5,robotframework-pabot==2.16.0,robotframework-pythonlibcore==4.2.0,robotframework-requests==0.9.2,robotframework-sapguilibrary==1.1,robotframework-seleniumlibrary==5.1.3,robotframework-stacktrace==0.4.1,robotframework-tidy==4.5.0,rpds-py==0.22.3,selenium==4.9.1,setuptools==75.8.0,smmap==5.0.2,sniffio==1.3.1,sortedcontainers==2.4.0,soupsieve==2.6,tomli==2.0.2,tomlkit==0.13.2,trio==0.28.0,trio-websocket==0.11.1,typing_extensions==4.12.2,urllib3==2.3.0,wheel==0.45.1,wrapt==1.17.2,wsproto==1.2.0
  </meta>
  <status endtime="20250217 15:41:50.936" starttime="20250217 15:40:59.265" status="FAIL"/>
 </suite>
 <statistics>
  <total>
   <stat fail="2" pass="0" skip="0">
    All Tests
   </stat>
  </total>
  <tag>
   <stat fail="2" pass="0" skip="0">
    Regression
   </stat>
   <stat fail="2" pass="0" skip="0">
    spampatchenhance
   </stat>
  </tag>
  <suite>
   <stat fail="2" id="s1" name="Tests" pass="0" skip="0">
    Tests
   </stat>
   <stat fail="2" id="s1-s1" name="Test spam patch enhance" pass="0" skip="0">
    Tests.Test spam patch enhance
   </stat>
  </suite>
 </statistics>
 <errors>
 </errors>
</robot>
